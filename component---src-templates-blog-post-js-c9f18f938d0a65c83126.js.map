{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["bioQuery","Bio","query","render","data","style","display","site","siteMetadata","author","BlogPostTemplate","pageContext","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","excerpt","date","tags","description","textTransform","fontSize","dangerouslySetInnerHTML","__html","html","length","map","tag","key","to","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","pageQuery"],"mappings":"8IAoBMA,EAAQ,YAUCC,IA3BH,kBACR,kBAAC,cAAD,CACIC,MAAOF,EACPG,OAAQ,SAACC,GAAD,OACJ,yBACIC,MAAO,CACHC,QAAS,SAEb,gCACO,IACH,gCAASF,EAAKG,KAAKC,aAAaC,WAThD,W,2ICJJ,0HAsEeC,UA/DU,SAAC,GAAqC,IAAnCN,EAAkC,EAAlCA,KAAMO,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACrCC,EAAOT,EAAKU,eACZC,EAAYX,EAAKG,KAAKC,aAAaQ,MACjCC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAHwC,EAInBL,EAAKM,YAApCH,EAJkD,EAIlDA,MAAOI,EAJ2C,EAI3CA,QAASC,EAJkC,EAIlCA,KAAMC,EAJ4B,EAI5BA,KAE9B,OACI,kBAAC,IAAD,CAAQV,SAAUA,EAAUI,MAAOD,GAC/B,kBAAC,IAAD,CAAKC,MAAOA,EAAOO,YAAaH,IAChC,4BAAKJ,GACL,uBACIX,MAAO,CACHmB,cAAe,YACfC,SAAU,SAEbJ,GAEL,yBAAKK,wBAAyB,CAAEC,OAAQd,EAAKe,QAC7C,6BAEA,uBACIvB,MAAO,CACHmB,cAAe,YACfC,SAAU,SAEbH,GACGA,EAAKO,QACLP,EAAKQ,KAAI,SAACC,GAAD,OACL,kBAAC,WAAD,CAAUC,IAAKD,GACX,kBAAC,OAAD,CAAME,GAAE,SAAWF,EAAX,KAAoBA,EAA5B,UAKhB,kBAAC,IAAD,MAEA,wBACI1B,MAAO,CACHC,QAAS,OACT4B,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAEb,4BACKpB,GACG,kBAAC,OAAD,CAAMgB,GAAIhB,EAASqB,OAAOC,KAAMC,IAAI,QAApC,KACOvB,EAASE,YAAYH,QAIpC,4BACKE,GACG,kBAAC,OAAD,CAAMe,GAAIf,EAAKoB,OAAOC,KAAMC,IAAI,QAC3BtB,EAAKC,YAAYH,MADtB,UAYjB,IAAMyB,EAAS","file":"component---src-templates-blog-post-js-c9f18f938d0a65c83126.js","sourcesContent":["import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst Bio = () => (\n    <StaticQuery\n        query={bioQuery}\n        render={(data) => (\n            <div\n                style={{\n                    display: 'flex'\n                }}>\n                <p>\n                    By{' '}\n                    <strong>{data.site.siteMetadata.author}</strong>\n                </p>\n            </div>\n        )}\n    />\n);\n\nconst bioQuery = graphql`\n    query BioQuery {\n        site {\n            siteMetadata {\n                author\n            }\n        }\n    }\n`;\n\nexport default Bio;\n","import React, { Fragment } from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Bio from '../components/bio';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n    const post = data.markdownRemark;\n    const siteTitle = data.site.siteMetadata.title;\n    const { previous, next } = pageContext;\n    const { title, excerpt, date, tags } = post.frontmatter;\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <SEO title={title} description={excerpt} />\n            <h3>{title}</h3>\n            <p\n                style={{\n                    textTransform: 'uppercase',\n                    fontSize: '14px'\n                }}>\n                {date}\n            </p>\n            <div dangerouslySetInnerHTML={{ __html: post.html }} />\n            <hr />\n\n            <p\n                style={{\n                    textTransform: 'uppercase',\n                    fontSize: '14px'\n                }}>\n                {tags &&\n                    tags.length &&\n                    tags.map((tag) => (\n                        <Fragment key={tag}>\n                            <Link to={`/tags/${tag}/`}>{tag} </Link>\n                        </Fragment>\n                    ))}\n            </p>\n\n            <Bio />\n\n            <ul\n                style={{\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                    justifyContent: 'space-between',\n                    listStyle: 'none',\n                    padding: 0\n                }}>\n                <li>\n                    {previous && (\n                        <Link to={previous.fields.slug} rel=\"prev\">\n                            ← {previous.frontmatter.title}\n                        </Link>\n                    )}\n                </li>\n                <li>\n                    {next && (\n                        <Link to={next.fields.slug} rel=\"next\">\n                            {next.frontmatter.title} →\n                        </Link>\n                    )}\n                </li>\n            </ul>\n        </Layout>\n    );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug($slug: String!) {\n        site {\n            siteMetadata {\n                title\n                author\n            }\n        }\n        markdownRemark(fields: { slug: { eq: $slug } }) {\n            id\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                tags\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}