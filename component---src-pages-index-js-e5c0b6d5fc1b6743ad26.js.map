{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js","webpack:///./src/components/bio.js","webpack:///./src/pages/page.module.css"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_bio__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","BlogIndex","_ref","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","a","createElement","keywords","map","_ref2","node","frontmatter","fields","slug","key","to","date","dangerouslySetInnerHTML","__html","excerpt","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Layout","style","marginLeft","marginRight","padding","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_4017075492_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","bioQuery","Bio","gatsby__WEBPACK_IMPORTED_MODULE_2__","display","_public_static_d_199957516_json__WEBPACK_IMPORTED_MODULE_0__","emphasize"],"mappings":"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","file":"component---src-pages-index-js-e5c0b6d5fc1b6743ad26.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Bio from '../components/bio';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport pageStyles from './page.module.css';\n\nconst BlogIndex = ({ data, location }) => {\n    const siteTitle = data.site.siteMetadata.title;\n    const posts = data.allMarkdownRemark.edges;\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <SEO title=\"All posts\" keywords={['blog']} />\n            <Bio />\n            {posts.map(({ node }) => {\n                const title =\n                    node.frontmatter.title || node.fields.slug;\n                return (\n                    <div key={node.fields.slug}>\n                        <h3>\n                            <Link to={node.fields.slug}>{title}</Link>\n                        </h3>\n                        <small>{node.frontmatter.date}</small>\n                        <p\n                            dangerouslySetInnerHTML={{\n                                __html: node.excerpt\n                            }}\n                        />\n                    </div>\n                );\n            })}\n        </Layout>\n    );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n        ) {\n            edges {\n                node {\n                    excerpt\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                    }\n                }\n            }\n        }\n    }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst Layout = ({ title, children }) => (\n    <div\n        style={{\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            padding: '30px'\n        }}>\n        <h1>\n            <Link to={'/'}>{title}</Link>\n        </h1>\n        {children}\n    </div>\n);\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst SEO = ({ description, lang, meta, keywords, title }) => (\n    <StaticQuery\n        query={detailsQuery}\n        render={({ site }) => {\n            const metaDescription =\n                description || site.siteMetadata.description;\n            return (\n                <Helmet\n                    htmlAttributes={{\n                        lang\n                    }}\n                    title={title}\n                    titleTemplate={`%s | ${site.siteMetadata.title}`}\n                    meta={[\n                        {\n                            name: 'description',\n                            content: metaDescription\n                        },\n                        {\n                            property: 'og:title',\n                            content: title\n                        },\n                        {\n                            property: 'og:description',\n                            content: metaDescription\n                        },\n                        {\n                            property: 'og:type',\n                            content: 'website'\n                        },\n                        {\n                            name: 'twitter:card',\n                            content: 'summary'\n                        },\n                        {\n                            name: 'twitter:creator',\n                            content: site.siteMetadata.author\n                        },\n                        {\n                            name: 'twitter:title',\n                            content: title\n                        },\n                        {\n                            name: 'twitter:description',\n                            content: metaDescription\n                        }\n                    ]\n                        .concat(\n                            keywords.length > 0\n                                ? {\n                                      name: 'keywords',\n                                      content: keywords.join(', ')\n                                  }\n                                : []\n                        )\n                        .concat(meta)}\n                />\n            );\n        }}\n    />\n);\n\nSEO.defaultProps = {\n    lang: 'en',\n    meta: [],\n    keywords: []\n};\n\nSEO.propTypes = {\n    description: PropTypes.string,\n    lang: PropTypes.string,\n    meta: PropTypes.array,\n    keywords: PropTypes.arrayOf(PropTypes.string),\n    title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n\nconst detailsQuery = graphql`\n    query DefaultSEOQuery {\n        site {\n            siteMetadata {\n                title\n                description\n                author\n            }\n        }\n    }\n`;\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst Bio = () => (\n    <StaticQuery\n        query={bioQuery}\n        render={(data) => (\n            <div\n                style={{\n                    display: 'flex'\n                }}>\n                <p>\n                    By{' '}\n                    <strong>{data.site.siteMetadata.author}</strong>\n                </p>\n            </div>\n        )}\n    />\n);\n\nconst bioQuery = graphql`\n    query BioQuery {\n        site {\n            siteMetadata {\n                author\n            }\n        }\n    }\n`;\n\nexport default Bio;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"page-module--title--1npzP\",\"emphasize\":\"page-module--emphasize--1BA4F\"};"],"sourceRoot":""}